!(function (e, t) { typeof exports == 'object' && typeof module != 'undefined' ? module.exports = t() : typeof define == 'function' && define.amd ? define(t) : (e = typeof globalThis != 'undefined' ? globalThis : e || self).dayjs_plugin_devHelper = t() }(this, () => { 'use strict'; return function (e, t, o) { if (!process || process.env.NODE_ENV !== 'production') { const s = t.prototype; const n = s.parse; s.parse = function (e) { const t = e.date; return typeof t == 'string' && t.length === 13 && console.warn(`To parse a Unix timestamp like ${t}, you should pass it as a Number. https://day.js.org/docs/en/parse/unix-timestamp-milliseconds`), typeof t == 'number' && String(t).length === 4 && console.warn(`Guessing you may want to parse the Year ${t}, you should pass it as a String ${t}, not a Number. Otherwise, ${t} will be treated as a Unix timestamp`), e.args.length >= 2 && !o.p.customParseFormat && console.warn(`To parse a date-time string like ${t} using the given format, you should enable customParseFormat plugin first. https://day.js.org/docs/en/parse/string-format`), n.bind(this)(e) }; const a = o.locale; o.locale = function (e, t, s) { return void 0 === t && typeof e == 'string' && (o.Ls[e] || console.warn(`Guessing you may want to use locale ${e}, you have to load it before using it. https://day.js.org/docs/en/i18n/loading-into-nodejs`)), a(e, t, s) } } } }))
